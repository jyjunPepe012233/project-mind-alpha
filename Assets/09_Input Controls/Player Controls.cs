//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/09_Input Controls/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Locomotion"",
            ""id"": ""d9051ff5-d00a-49a9-93ba-5688b05c1684"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0f2c5c4e-7982-4e19-a6d3-0fd0aed61202"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Space_Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""c34c72d4-47ea-4e9e-9b2e-844d4a998c39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.32)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space_Blink"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ee9972c0-f511-42ef-a0b0-4fa68579beab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.32)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""e75cb1da-9f38-40da-8928-df82bb9fc095"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af0f2dba-129a-4063-810e-050c3d6a321d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector [Keyboard]"",
                    ""id"": ""59dd971d-5785-48b1-8a94-b148249bf738"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fd716cce-b600-4027-a1e7-9c12fed8d9ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""163c1731-c0cb-4d6c-8671-5350d801f70a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a9691e9d-5eaa-40ac-a64f-d1070ef5f2a9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""afdf1c43-cdd0-422c-98c2-913b1e295fc7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7e8483bf-fff3-4755-9441-8f4dd8221446"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Space_Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc6fe0e8-f8fb-454a-8910-00328658a9dc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28b003d0-470e-41db-8632-0af470478b4f"",
                    ""path"": ""<SwitchProControllerHID>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Space_Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e944b140-d548-4433-af18-9782114dcd3b"",
                    ""path"": ""<SwitchProControllerHID>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e562beb1-d92e-4f64-8a9a-55c37e9eca05"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Space_Blink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fda2082d-8597-4503-b3bd-4149fbd88d22"",
                    ""path"": ""<SwitchProControllerHID>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Space_Blink"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControl"",
            ""id"": ""bd8e0b6a-8129-4568-ada6-ed65abce539e"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""277d70b0-4e4a-47de-94e6-5876275eff4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lock On"",
                    ""type"": ""Button"",
                    ""id"": ""284a75fa-cf8b-4dd1-a968-e28d29dac2b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b782992-9bfc-4dcd-8778-6d007de7b91d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61f15256-dc4a-4b51-9f20-20b69af0ab7d"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Lock On"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0876a42f-73e4-4dae-9385-a30956d929b9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Lock On"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4efc24b3-a999-41fb-b886-e9ae7f6f4c37"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b61db36-6f06-433c-a85d-f5ccb3e7d554"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Lock On"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""2a1d89c3-6f85-474a-ae88-c9b656611939"",
            ""actions"": [
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""78aa0db2-165c-4781-91a6-46fdbd6f5942"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1fac87e3-2157-4998-aafb-8ba29186dfd9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d06b24eb-9b18-442f-81a9-a4016c73db4a"",
                    ""path"": ""<SwitchProControllerHID>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""378c9833-4640-4670-ad8f-130325efaa5c"",
            ""actions"": [
                {
                    ""name"": ""Use Magic"",
                    ""type"": ""Button"",
                    ""id"": ""76fec518-00fc-4acf-8d1f-d19fdfff33c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Magic"",
                    ""type"": ""Button"",
                    ""id"": ""e46e8f37-b868-415c-bb1d-d6e46c71f65d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use Tool"",
                    ""type"": ""Button"",
                    ""id"": ""c260ef30-805f-4a2d-ae87-67f3aacf3c58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap Tool"",
                    ""type"": ""Button"",
                    ""id"": ""997e3b6a-187c-4efe-92d2-08277d81a3d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Defense Magic"",
                    ""type"": ""Button"",
                    ""id"": ""ab7dcc72-6367-4eaa-9635-1e0f08a0efc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7c33d11-e8cb-435a-8032-ca69a3ce7133"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Use Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8574993-331a-4c18-a494-2666dfe3193e"",
                    ""path"": ""<SwitchProControllerHID>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Use Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis [Keyboard]"",
                    ""id"": ""e57e1bf8-94db-4791-aaea-1ce8fc7d74d2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Magic"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9af56fac-e8ee-4d18-a20a-1485d4c75096"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Swap Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ff791695-fdc0-4bca-a2cf-6cc45d32150c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Swap Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis [Gamepad]"",
                    ""id"": ""b0974164-2cec-4df6-8f9b-5ffdcefcdcc0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Magic"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f6418648-76e9-4e66-aa2e-945780b7426b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a36e22a7-1d47-4971-b7a7-04adef595ce1"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e1f41101-e5f7-4461-b2ef-f05575fce512"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Defense Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bc48516-8647-4885-b626-df92d889c793"",
                    ""path"": ""<SwitchProControllerHID>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Defense Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14abd203-23aa-4cfa-8348-37b9cb41441f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Use Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""627e398f-d8e7-45a5-b1e6-704a0418cabd"",
                    ""path"": ""<SwitchProControllerHID>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Use Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis [Keyboard]"",
                    ""id"": ""c57dff1b-8f4d-47c8-850a-5f421b7b1a0a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Tool"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d3578516-19ea-4a47-ad7f-08ab8772f8a6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Swap Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""979ff137-c99d-4b2e-888d-91e167961b6e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Swap Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis [Gamepad]"",
                    ""id"": ""8a1e3935-439b-4191-b021-e4ecf6fd9d3d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Tool"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""182d5ce7-d2d2-4bc0-b228-ca52b6ee0ced"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d8228d8-1eae-4d07-a44b-01661f289e89"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MenuControl"",
            ""id"": ""c6596592-3bba-4284-ae63-bc6ab64092ff"",
            ""actions"": [
                {
                    ""name"": ""Menu Quit Input"",
                    ""type"": ""Button"",
                    ""id"": ""ee2dd905-d2d7-4c0d-b486-0630beac73d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu Select Input"",
                    ""type"": ""Button"",
                    ""id"": ""e6c257b2-06d1-4317-8034-b0d0f48f58d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu Dirx Input"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c7390c10-e580-4f02-9708-7c5d1665fcfc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move Menu Tab"",
                    ""type"": ""Button"",
                    ""id"": ""857e0960-3125-467a-8140-10f8b47d7f62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""8f14563b-c4c9-4447-a236-f0cf3263ae63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""002d6d7a-edf5-4672-9048-0cd64b7f4009"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pro-Controller"",
                    ""action"": ""Menu Dirx Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector [MouseNKey]"",
                    ""id"": ""d2c7da69-ad6a-46d1-ba1d-e394c35cbf23"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu Dirx Input"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4fb08ecc-dcc4-4159-825d-45d93169189d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Menu Dirx Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""92b038b2-29c8-4d5d-ab0f-60cca3897894"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Menu Dirx Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4f55def4-367d-4992-abec-74ea7d6034c1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Menu Dirx Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""feab106b-2899-4936-ba24-8a3fbecfd548"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Menu Dirx Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cdfa01ae-1b59-40b2-a308-566f96f42a8f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Menu Quit Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e02b8ab1-3f16-4ff1-ae99-08a04cd1e82f"",
                    ""path"": ""<SwitchProControllerHID>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu Quit Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a0a5571-c106-4335-86d7-e55299a25631"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Menu Select Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d5fc64a-b449-4b87-bceb-b47dcf95b1f9"",
                    ""path"": ""<SwitchProControllerHID>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu Select Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""331ce0ab-6d6b-4f40-9f12-3ded103764aa"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb5b18eb-c6dc-4adc-9947-0d6c941a0685"",
                    ""path"": ""<SwitchProControllerHID>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis [MouseNKey]"",
                    ""id"": ""c3013904-7103-41ca-9ee1-6e80b675cd1f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6ef0ab3a-cdc4-4ca6-8bcb-35f9370a9cd4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f9c7401d-5095-4e45-a05f-20c695c016b8"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseNKey"",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis [Switch Pro Controller]"",
                    ""id"": ""42dd6e8a-b5c9-4af6-b2e9-b8c1965ad0ab"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d2c3affe-0284-4bec-b27a-86de70f6d1a0"",
                    ""path"": ""<SwitchProControllerHID>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4f266353-da69-4afa-a30f-0b005079c14a"",
                    ""path"": ""<SwitchProControllerHID>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""eaed0880-4129-4db3-bcd9-08e12595f662"",
                    ""path"": ""<SwitchProControllerHID>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7b9b007b-db73-4933-8f62-760a27c83510"",
                    ""path"": ""<SwitchProControllerHID>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Menu Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseNKey"",
            ""bindingGroup"": ""MouseNKey"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Pro-Controller"",
            ""bindingGroup"": ""Pro-Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<SwitchProControllerHID>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Locomotion
        m_Locomotion = asset.FindActionMap("Locomotion", throwIfNotFound: true);
        m_Locomotion_Movement = m_Locomotion.FindAction("Movement", throwIfNotFound: true);
        m_Locomotion_Space_Sprint = m_Locomotion.FindAction("Space_Sprint", throwIfNotFound: true);
        m_Locomotion_Space_Blink = m_Locomotion.FindAction("Space_Blink", throwIfNotFound: true);
        m_Locomotion_Jump = m_Locomotion.FindAction("Jump", throwIfNotFound: true);
        // CameraControl
        m_CameraControl = asset.FindActionMap("CameraControl", throwIfNotFound: true);
        m_CameraControl_Rotation = m_CameraControl.FindAction("Rotation", throwIfNotFound: true);
        m_CameraControl_LockOn = m_CameraControl.FindAction("Lock On", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Interaction = m_Interaction.FindAction("Interaction", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_UseMagic = m_Combat.FindAction("Use Magic", throwIfNotFound: true);
        m_Combat_SwapMagic = m_Combat.FindAction("Swap Magic", throwIfNotFound: true);
        m_Combat_UseTool = m_Combat.FindAction("Use Tool", throwIfNotFound: true);
        m_Combat_SwapTool = m_Combat.FindAction("Swap Tool", throwIfNotFound: true);
        m_Combat_DefenseMagic = m_Combat.FindAction("Defense Magic", throwIfNotFound: true);
        // MenuControl
        m_MenuControl = asset.FindActionMap("MenuControl", throwIfNotFound: true);
        m_MenuControl_MenuQuitInput = m_MenuControl.FindAction("Menu Quit Input", throwIfNotFound: true);
        m_MenuControl_MenuSelectInput = m_MenuControl.FindAction("Menu Select Input", throwIfNotFound: true);
        m_MenuControl_MenuDirxInput = m_MenuControl.FindAction("Menu Dirx Input", throwIfNotFound: true);
        m_MenuControl_MoveMenuTab = m_MenuControl.FindAction("Move Menu Tab", throwIfNotFound: true);
        m_MenuControl_OpenInventory = m_MenuControl.FindAction("Open Inventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Locomotion
    private readonly InputActionMap m_Locomotion;
    private List<ILocomotionActions> m_LocomotionActionsCallbackInterfaces = new List<ILocomotionActions>();
    private readonly InputAction m_Locomotion_Movement;
    private readonly InputAction m_Locomotion_Space_Sprint;
    private readonly InputAction m_Locomotion_Space_Blink;
    private readonly InputAction m_Locomotion_Jump;
    public struct LocomotionActions
    {
        private @PlayerControls m_Wrapper;
        public LocomotionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Locomotion_Movement;
        public InputAction @Space_Sprint => m_Wrapper.m_Locomotion_Space_Sprint;
        public InputAction @Space_Blink => m_Wrapper.m_Locomotion_Space_Blink;
        public InputAction @Jump => m_Wrapper.m_Locomotion_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Locomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocomotionActions set) { return set.Get(); }
        public void AddCallbacks(ILocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_LocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Space_Sprint.started += instance.OnSpace_Sprint;
            @Space_Sprint.performed += instance.OnSpace_Sprint;
            @Space_Sprint.canceled += instance.OnSpace_Sprint;
            @Space_Blink.started += instance.OnSpace_Blink;
            @Space_Blink.performed += instance.OnSpace_Blink;
            @Space_Blink.canceled += instance.OnSpace_Blink;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(ILocomotionActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Space_Sprint.started -= instance.OnSpace_Sprint;
            @Space_Sprint.performed -= instance.OnSpace_Sprint;
            @Space_Sprint.canceled -= instance.OnSpace_Sprint;
            @Space_Blink.started -= instance.OnSpace_Blink;
            @Space_Blink.performed -= instance.OnSpace_Blink;
            @Space_Blink.canceled -= instance.OnSpace_Blink;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(ILocomotionActions instance)
        {
            if (m_Wrapper.m_LocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_LocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LocomotionActions @Locomotion => new LocomotionActions(this);

    // CameraControl
    private readonly InputActionMap m_CameraControl;
    private List<ICameraControlActions> m_CameraControlActionsCallbackInterfaces = new List<ICameraControlActions>();
    private readonly InputAction m_CameraControl_Rotation;
    private readonly InputAction m_CameraControl_LockOn;
    public struct CameraControlActions
    {
        private @PlayerControls m_Wrapper;
        public CameraControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_CameraControl_Rotation;
        public InputAction @LockOn => m_Wrapper.m_CameraControl_LockOn;
        public InputActionMap Get() { return m_Wrapper.m_CameraControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @LockOn.started += instance.OnLockOn;
            @LockOn.performed += instance.OnLockOn;
            @LockOn.canceled += instance.OnLockOn;
        }

        private void UnregisterCallbacks(ICameraControlActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @LockOn.started -= instance.OnLockOn;
            @LockOn.performed -= instance.OnLockOn;
            @LockOn.canceled -= instance.OnLockOn;
        }

        public void RemoveCallbacks(ICameraControlActions instance)
        {
            if (m_Wrapper.m_CameraControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlActions @CameraControl => new CameraControlActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
    private readonly InputAction m_Interaction_Interaction;
    public struct InteractionActions
    {
        private @PlayerControls m_Wrapper;
        public InteractionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interaction => m_Wrapper.m_Interaction_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
        }

        private void UnregisterCallbacks(IInteractionActions instance)
        {
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
        }

        public void RemoveCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_UseMagic;
    private readonly InputAction m_Combat_SwapMagic;
    private readonly InputAction m_Combat_UseTool;
    private readonly InputAction m_Combat_SwapTool;
    private readonly InputAction m_Combat_DefenseMagic;
    public struct CombatActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseMagic => m_Wrapper.m_Combat_UseMagic;
        public InputAction @SwapMagic => m_Wrapper.m_Combat_SwapMagic;
        public InputAction @UseTool => m_Wrapper.m_Combat_UseTool;
        public InputAction @SwapTool => m_Wrapper.m_Combat_SwapTool;
        public InputAction @DefenseMagic => m_Wrapper.m_Combat_DefenseMagic;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @UseMagic.started += instance.OnUseMagic;
            @UseMagic.performed += instance.OnUseMagic;
            @UseMagic.canceled += instance.OnUseMagic;
            @SwapMagic.started += instance.OnSwapMagic;
            @SwapMagic.performed += instance.OnSwapMagic;
            @SwapMagic.canceled += instance.OnSwapMagic;
            @UseTool.started += instance.OnUseTool;
            @UseTool.performed += instance.OnUseTool;
            @UseTool.canceled += instance.OnUseTool;
            @SwapTool.started += instance.OnSwapTool;
            @SwapTool.performed += instance.OnSwapTool;
            @SwapTool.canceled += instance.OnSwapTool;
            @DefenseMagic.started += instance.OnDefenseMagic;
            @DefenseMagic.performed += instance.OnDefenseMagic;
            @DefenseMagic.canceled += instance.OnDefenseMagic;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @UseMagic.started -= instance.OnUseMagic;
            @UseMagic.performed -= instance.OnUseMagic;
            @UseMagic.canceled -= instance.OnUseMagic;
            @SwapMagic.started -= instance.OnSwapMagic;
            @SwapMagic.performed -= instance.OnSwapMagic;
            @SwapMagic.canceled -= instance.OnSwapMagic;
            @UseTool.started -= instance.OnUseTool;
            @UseTool.performed -= instance.OnUseTool;
            @UseTool.canceled -= instance.OnUseTool;
            @SwapTool.started -= instance.OnSwapTool;
            @SwapTool.performed -= instance.OnSwapTool;
            @SwapTool.canceled -= instance.OnSwapTool;
            @DefenseMagic.started -= instance.OnDefenseMagic;
            @DefenseMagic.performed -= instance.OnDefenseMagic;
            @DefenseMagic.canceled -= instance.OnDefenseMagic;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // MenuControl
    private readonly InputActionMap m_MenuControl;
    private List<IMenuControlActions> m_MenuControlActionsCallbackInterfaces = new List<IMenuControlActions>();
    private readonly InputAction m_MenuControl_MenuQuitInput;
    private readonly InputAction m_MenuControl_MenuSelectInput;
    private readonly InputAction m_MenuControl_MenuDirxInput;
    private readonly InputAction m_MenuControl_MoveMenuTab;
    private readonly InputAction m_MenuControl_OpenInventory;
    public struct MenuControlActions
    {
        private @PlayerControls m_Wrapper;
        public MenuControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MenuQuitInput => m_Wrapper.m_MenuControl_MenuQuitInput;
        public InputAction @MenuSelectInput => m_Wrapper.m_MenuControl_MenuSelectInput;
        public InputAction @MenuDirxInput => m_Wrapper.m_MenuControl_MenuDirxInput;
        public InputAction @MoveMenuTab => m_Wrapper.m_MenuControl_MoveMenuTab;
        public InputAction @OpenInventory => m_Wrapper.m_MenuControl_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_MenuControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuControlActions set) { return set.Get(); }
        public void AddCallbacks(IMenuControlActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuControlActionsCallbackInterfaces.Add(instance);
            @MenuQuitInput.started += instance.OnMenuQuitInput;
            @MenuQuitInput.performed += instance.OnMenuQuitInput;
            @MenuQuitInput.canceled += instance.OnMenuQuitInput;
            @MenuSelectInput.started += instance.OnMenuSelectInput;
            @MenuSelectInput.performed += instance.OnMenuSelectInput;
            @MenuSelectInput.canceled += instance.OnMenuSelectInput;
            @MenuDirxInput.started += instance.OnMenuDirxInput;
            @MenuDirxInput.performed += instance.OnMenuDirxInput;
            @MenuDirxInput.canceled += instance.OnMenuDirxInput;
            @MoveMenuTab.started += instance.OnMoveMenuTab;
            @MoveMenuTab.performed += instance.OnMoveMenuTab;
            @MoveMenuTab.canceled += instance.OnMoveMenuTab;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
        }

        private void UnregisterCallbacks(IMenuControlActions instance)
        {
            @MenuQuitInput.started -= instance.OnMenuQuitInput;
            @MenuQuitInput.performed -= instance.OnMenuQuitInput;
            @MenuQuitInput.canceled -= instance.OnMenuQuitInput;
            @MenuSelectInput.started -= instance.OnMenuSelectInput;
            @MenuSelectInput.performed -= instance.OnMenuSelectInput;
            @MenuSelectInput.canceled -= instance.OnMenuSelectInput;
            @MenuDirxInput.started -= instance.OnMenuDirxInput;
            @MenuDirxInput.performed -= instance.OnMenuDirxInput;
            @MenuDirxInput.canceled -= instance.OnMenuDirxInput;
            @MoveMenuTab.started -= instance.OnMoveMenuTab;
            @MoveMenuTab.performed -= instance.OnMoveMenuTab;
            @MoveMenuTab.canceled -= instance.OnMoveMenuTab;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
        }

        public void RemoveCallbacks(IMenuControlActions instance)
        {
            if (m_Wrapper.m_MenuControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuControlActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuControlActions @MenuControl => new MenuControlActions(this);
    private int m_MouseNKeySchemeIndex = -1;
    public InputControlScheme MouseNKeyScheme
    {
        get
        {
            if (m_MouseNKeySchemeIndex == -1) m_MouseNKeySchemeIndex = asset.FindControlSchemeIndex("MouseNKey");
            return asset.controlSchemes[m_MouseNKeySchemeIndex];
        }
    }
    private int m_ProControllerSchemeIndex = -1;
    public InputControlScheme ProControllerScheme
    {
        get
        {
            if (m_ProControllerSchemeIndex == -1) m_ProControllerSchemeIndex = asset.FindControlSchemeIndex("Pro-Controller");
            return asset.controlSchemes[m_ProControllerSchemeIndex];
        }
    }
    public interface ILocomotionActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSpace_Sprint(InputAction.CallbackContext context);
        void OnSpace_Blink(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICameraControlActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnUseMagic(InputAction.CallbackContext context);
        void OnSwapMagic(InputAction.CallbackContext context);
        void OnUseTool(InputAction.CallbackContext context);
        void OnSwapTool(InputAction.CallbackContext context);
        void OnDefenseMagic(InputAction.CallbackContext context);
    }
    public interface IMenuControlActions
    {
        void OnMenuQuitInput(InputAction.CallbackContext context);
        void OnMenuSelectInput(InputAction.CallbackContext context);
        void OnMenuDirxInput(InputAction.CallbackContext context);
        void OnMoveMenuTab(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
}
